generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  Admin
  Customer
}

model User {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  phoneNumber String
  email       String   @unique
  password    String
  role        UserRole

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]

  @@map("users")
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String
  logo String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("brands")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model Location {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

enum ProductStock {
  ready
  preorder
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  price       Int
  stock       ProductStock
  images      String

  brand      Brand    @relation(fields: [brandId], references: [id])
  brandId    Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  location   Location @relation(fields: [locationId], references: [id])
  locationId Int

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  OrderProduct OrderProduct[]

  @@map("products")
}

enum StatusOrder {
  pending
  success
  failed
}

model Order {
  id     Int         @id @default(autoincrement())
  code   String
  user   User        @relation(fields: [userId], references: [id])
  userId Int
  total  Int
  status StatusOrder

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orderDetail  OrderDetail?
  OrderProduct OrderProduct[]

  @@map("orders")
}

model OrderDetail {
  id         Int     @id @default(autoincrement())
  name       String
  phone      Int
  address    String
  city       String
  postalCode Int
  note       String?

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int   @unique

  @@map("order_details")
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
}
